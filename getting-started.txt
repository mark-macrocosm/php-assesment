<?php

// Don't introduce dependencies

/**
 * Please fix the items marked with "@TODO" in this class
 * 
 * Follow the https://www.php-fig.org/psr/psr-2/ coding style guide.
 * 
 * One exception to PSR-2: opening braces MUST always be on the same line 
 * for classes, methods, functions, and control structures
 */
class Singleton { // Space after class name

    /**
     * Use constants for immutable types instead of variables
     * Use descriptive names
     */
    const STRING_A     = 'A';
    const STRING_A_LONG = 'stringA';
    const STRING_B_LONG = 'stringB';
    const STRING_NON_A = '^A';
    const STRING_NON_B = '^B';
    const STRING_NON_C = '^C';
    const STRING_ABC   = 'ABC';
    const INT_A = 1;
    const INT_B = 2;

    /**
     * Always comment your properties
     * Private and protected properties/methods should begin with an underscore (_)
     * 
     * @var Singleton
     */
    protected static $_instance = null;
    
    /**
     * Use descriptive names
     * 
     * @var PDO|null
     */
    private $_dbConnection = null;
    
    // Never store User/Pass values in plain-text

    /**
     * The db connection is established in the private constructor
     */
    private function __construct() {
        // Use a configuration object for sensitive info
        // This class should load the user/pass data from an external file
        // or from env()
        $config = new Configuration();
        
        // Establish PDO DB connection
        $this->_dbConnection = new PDO(
            "mysql:host={$this->host};dbname={$config->datbase_name}",
            $config->userName,
            $config->password,
            array(PDO::MYSQL_ATTR_INIT_COMMAND => "SET NAMES 'utf8'") // Good for SQL-injection prevention alongside mysql_real_escape_string()
        );
    }
    
    /**
     * Explain what this does
     * 
     * @return Singleton
     */
    public static function getInstance(): self {
        if (null === self::$instance) {
            self::$instance = new self();
        }

        return self::$instance;
    }

    /**
     * Get database connection 
     * 
     * @return PDO 
     */
    public function getConnection() {
        // 4 spaces instead of 2 for indentation
        // Always specify the return value
        return $this->_dbConnection;
    }


    /**
     * Display user name
     * 
     * @param string $name User-provided name
     */
    public function userEcho($name) {
        // Validate type and length
        if (!is_string($name) || !strlen($name)) {
            throw new Exception('Name is not a valid string');
        }
        
        // Clean-up
        echo filter_var($name, FILTER_SANITIZE_STRING);
    }

    /**
     * Query by user name
     * 
     * @param string $name User-provided name
     */
    public function userQuery($name) {
        // Use built-in functions for SQL escaping
        return mysql_query(
            sprintf(
                "SELECT * FROM `test` WHERE `name` = '%s' LIMIT 1",
                mysql_real_escape_string($name)
            ),
            $this->getConnection()
        );
    }

    /**
     * Output the contents of a file
     * 
     * @param string $path User-provided file path
     */
    public function userFile($path) {
        // User paths are relative to this root
        $root = '/real/path/to/files';
        
        // The main point is to never allow users to perform directory traversal
        // Special characters like "." and ".." and direct root access should be forbidden
        if (!is_string($path) || !strlen($path)) {
            throw new Exception('No file path provided');
        }
        
        // Validate relative path, file name and extension
        if (!preg_match('%^(?:allowed_path_a|allowed_path_b)\/\w+\.(?:ext|png|jpe?g)$%i', $path)) {
            throw new Exception('Invalid file path');
        }
        
        // File not found
        if (!is_file("$root/$path")) {
            throw new Exception('File not found');
        }

        readfile("$root/$path");
    }

    /**
     * Nested conditions
     */
    public function nestedConditions() {
        // A long string of short-if statements is less readable than the nested ifs
        do {
            if (!$conditionA) {
                echo self::STRING_NON_A;
                break;
            }
            
            if (!$conditionB) {
                echo self::STRING_NON_B;
                break;
            }
            
            if (!$conditionC) {
                echo self::STRING_NON_C;
                break;
            }
            
            echo self::STRING_ABC;
        } while(false);
    }

    /**
     * Return statements
     * 
     * @return boolean
     */
    public function returnStatements() {
        // Don't alter the function behavior
        if ($conditionA) {
            echo self::STRING_A;
        }
        
        // Implicit boolean conversion
        return !!$conditionA;
    }

    /**
     * Null coalescing
     */
    public function nullCoalescing() {
        // Don't change method return value
        return $_GET['name'] ?? $_POST['name'] ?? 'nobody';
    }

    /**
     * Method chaining
     */
    public function methodChained() {
        return $this;
    }

    /**
     * Immutables are hard to find
     */
    public function checkValue($value)
    {
        $result = null;
        
        // We should't use constants (strings, ints) locally
        // Store them as class constants instead
        switch ($value) {
            case self::STRING_A_LONG:
                $result = INT_A;
                break;
                
            case self::STRING_B_LONG:
                $result = INT_B;
                break;
        }
        
        return $result;
    }

    /**
     * Check a string is a 24 hour time
     * 
     * @example "00:00:00", "23:59:59", "20:15"
     * @return boolean
     */
    public function regexTest($time24Hour): string
    {
        // No need to sanitize further, a regex will do
        // [0-9] is equivalent to \d
        // 0 left padding - so [01]\d instad of [01]?\d (02:00 instead of 2:00)
        // DRY - don't repeat yourself, the 00-59 minute/second block can appear once or twice
        // Don't use capturing blocks if you don't need them - (?:) instead of ()
        // preg_match returns 0,1 or false; expected return value is boolean
        return !!preg_match('#^(?:[01]\d|2[0-3])(?:\:[0-5]\d){1,2}$#', $time24Hour);
    }
}

/*EOF*/
